Author: Mehdi Dogguy <mehdi@debian.org>
Bug-Origin: https://github.com/open-mpi/ompi/issues/3003
Description: Fix CPU frequency-dependent timer issues
Forwarded: not needed
Last-Updated: 2018-10-11

The patch below is the combination of the two following commits:
https://github.com/open-mpi/ompi/commit/ab7dad261452fdd40642be8237acbb780a026f04
https://github.com/open-mpi/ompi/commit/43ab707d96f4aeae5f2b8f22d504544dad2e66da

They fix a severe performance regression due to the way timer works. The
issue reference above explains the issue in details.

--- a/ompi/mpi/c/wtick.c
+++ b/ompi/mpi/c/wtick.c
@@ -12,6 +12,9 @@
  * Copyright (c) 2007-2014 Cisco Systems, Inc.  All rights reserved.
  * Copyright (c) 2015-2016 Research Organization for Information Science
  *                         and Technology (RIST). All rights reserved.
+ * Copyright (c) 2017      IBM Corporation.  All rights reserved.
+ * Copyright (c) 2017      Los Alamos National Security, LLC. All rights
+ *                         reserved.
  * $COPYRIGHT$
  *
  * Additional copyrights may follow
@@ -24,6 +27,9 @@
 #include <sys/time.h>
 #endif
 #include <stdio.h>
+#ifdef HAVE_TIME_H
+#include <time.h>
+#endif
 
 #include MCA_timer_IMPLEMENTATION_HEADER
 #include "ompi/mpi/c/bindings.h"
@@ -38,6 +44,11 @@
 
 double MPI_Wtick(void)
 {
+    /*
+     * See https://github.com/open-mpi/ompi/issues/3003
+     * to get an idea what's going on here.
+     */
+#if 0
 #if OPAL_TIMER_CYCLE_NATIVE
     {
         opal_timer_t freq = opal_timer_base_get_freq();
@@ -50,8 +61,21 @@
     }
 #elif OPAL_TIMER_USEC_NATIVE
     return 0.000001;
+#endif
+#else
+#if defined(__linux__) && OPAL_HAVE_CLOCK_GETTIME
+    struct timespec spec;
+    double wtick = 0.0;
+    if (0 == clock_getres(CLOCK_MONOTONIC, &spec)){
+        wtick =  spec.tv_sec + spec.tv_nsec * 1.0e-09;
+    } else {
+        /* guess */
+        wtick = 1.0e-09;
+    }
+    return wtick;
 #else
     /* Otherwise, we already return usec precision. */
     return 0.000001;
 #endif
+#endif
 }
--- a/ompi/mpi/c/wtime.c
+++ b/ompi/mpi/c/wtime.c
@@ -12,6 +12,9 @@
  * Copyright (c) 2006-2014 Cisco Systems, Inc.  All rights reserved.
  * Copyright (c) 2015      Research Organization for Information Science
  *                         and Technology (RIST). All rights reserved.
+ * Copyright (c) 2017      IBM Corporation.  All rights reserved.
+ * Copyright (c) 2017      Los Alamos National Security, LLC. All rights
+ *                         reserved.
  * $COPYRIGHT$
  *
  * Additional copyrights may follow
@@ -24,6 +27,9 @@
 #include <sys/time.h>
 #endif
 #include <stdio.h>
+#ifdef HAVE_TIME_H
+#include <time.h>
+#endif  /* HAVE_TIME_H */
 
 #include MCA_timer_IMPLEMENTATION_HEADER
 #include "ompi/mpi/c/bindings.h"
@@ -40,10 +46,22 @@
 {
     double wtime;
 
+    /*
+     * See https://github.com/open-mpi/ompi/issues/3003 to find out
+     * what's happening here.
+     */
+#if 0
 #if OPAL_TIMER_CYCLE_NATIVE
     wtime = ((double) opal_timer_base_get_cycles()) / opal_timer_base_get_freq();
 #elif OPAL_TIMER_USEC_NATIVE
     wtime = ((double) opal_timer_base_get_usec()) / 1000000.0;
+#endif
+#else
+#if defined(__linux__) && OPAL_HAVE_CLOCK_GETTIME
+    struct timespec tp = {.tv_sec = 0, .tv_nsec = 0};
+    (void) clock_gettime(CLOCK_MONOTONIC, &tp);
+    wtime = tp.tv_sec;
+    wtime += tp.tv_nsec/1.0e+9;
 #else
     /* Fall back to gettimeofday() if we have nothing else */
     struct timeval tv;
@@ -51,6 +69,7 @@
     wtime = tv.tv_sec;
     wtime += (double)tv.tv_usec / 1000000.0;
 #endif
+#endif
 
     return wtime;
 }
